{"version":3,"sources":["parser.js","App.js","serviceWorker.js","index.js"],"names":["parser","files","config","Promise","resolve","reject","reader","FileReader","onload","e","data","target","result","workbook","XLSX","read","type","row","utils","sheet_to_row_object_array","Sheets","SheetNames","camelCase","map","item","res","Object","keys","forEach","key","value","code","deliveryPoint","lat","lon","postalCode","address","city","name","deliveryFrom","deliveryTo","clientCode","pib","orgUnitCode","geozone","servingTime","onerror","err","file","readAsBinaryString","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","convertFilesToJson","bind","assertThisInitialized","length","setState","parseXLS","blob","Blob","JSON","stringify","fileName","split","saveAs","_context","t0","_this2","_this$state","react_default","a","createElement","className","onClick","onChange","preventDefault","Array","from","console","log","i","parseFloat","size","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2703a2e9.chunk.js","sourcesContent":["import XLSX from \"xlsx\";\nimport camelCase from \"camel-case\";\n\nexport default (files, config) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const data = e.target.result;\n      const workbook = XLSX.read(data, {\n        type: \"binary\"\n      });\n\n      let row = XLSX.utils.sheet_to_row_object_array(\n        workbook.Sheets[workbook.SheetNames[0]]\n      );\n      // transform row\n      if (config.camelCase) {\n        row = row.map(item => {\n          let res = {};\n          Object.keys(item).forEach(key => {\n            const value = item[key];\n            res[camelCase(key)] = value;\n          });\n          return {\n            code: res.code || \"\",\n            deliveryPoint: {\n              lat: res.lat || \"\",\n              lon: res.lon || \"\",\n              postalCode: res.postalCode || \"\",\n              address: res.address || \"\",\n              city: res.city || \"\"\n            },\n            name: res.name || \"\",\n            deliveryFrom: res.deliveryFrom || \"\",\n            deliveryTo: res.deliveryTo || \"\",\n            clientCode: res.clientCode || \"\",\n            pib: res.pib || \"\",\n            orgUnitCode: res.orgUnitCode || \"\",\n            geozone: res.geozone || \"\",\n            servingTime: res.servingTime || \"\"\n          };\n        });\n      }\n      resolve(row);\n    };\n    reader.onerror = err => {\n      reject(err);\n    };\n    files.forEach(file => {\n      reader.readAsBinaryString(file);\n    });\n  });\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport parseXLS from \"./parser\";\nimport { saveAs } from \"file-saver\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      files: [],\n      error: \"\"\n    };\n    this.convertFilesToJson = this.convertFilesToJson.bind(this);\n  }\n  async convertFilesToJson() {\n    const { files } = this.state;\n    if (files.length > 1) {\n      this.setState({ error: \"Uploadujte samo jedan fajl!\" });\n      return;\n    }\n    try {\n      const data = await parseXLS(files, { camelCase: true });\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      const fileName = files[0].name.split(\".xls\")[0] + \".json\";\n      saveAs(blob, fileName);\n    } catch (error) {\n      this.setState({ error });\n    }\n  }\n  render() {\n    const { files, error } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {error ? (\n            <div>\n              <p>{error}</p>\n            </div>\n          ) : (\n            <p>\n              Izaberite <code>.xls</code> ili <code>.xlsx</code> fajl za\n              konverziju.\n            </p>\n          )}\n          {files.length ? (\n            <div>\n              <button onClick={this.convertFilesToJson}>Konvertuj</button>\n              <button onClick={() => this.setState({ files: [] })}>\n                Nazad\n              </button>\n            </div>\n          ) : (\n            <input\n              type=\"file\"\n              name=\"file\"\n              onChange={e => {\n                e.preventDefault();\n                const { files } = e.target;\n                if (files.length > 1) {\n                  this.setState({ error: \"Uploadujte samo jedan fajl!\" });\n                } else {\n                  this.setState({ files: Array.from(e.target.files) });\n                }\n              }}\n            />\n          )}\n          <ul>\n            {console.log(files)}\n            {files &&\n              files.map((file, i) => (\n                <li key={i}>\n                  <strong>{file.name}</strong>\n                  <small>\n                    {parseFloat(file.size / (100 * 1000)).toFixed(2)} MB\n                  </small>\n                </li>\n              ))}\n          </ul>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}